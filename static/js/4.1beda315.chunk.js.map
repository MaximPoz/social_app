{"version":3,"sources":["utils/validators/validators.js","components/common/FormsControls/FormsControls.module.css","components/common/FormsControls/FormsControls.js","components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/ProfileInfo/ProfileStatus.jsx","components/Profile/ProfileInfo/ProfileStatusHooks.jsx","components/Profile/ProfileInfo/ProfileInfo.jsx","components/Profile/MyPosts/AddPostForm/AddPostForm.jsx","components/Profile/MyPosts/Post/Post.jsx","components/Profile/MyPosts/MyPosts.jsx","components/Profile/MyPosts/MyPostsContainer.jsx","components/Profile/Profile.jsx","components/Profile/ProfileContainer.jsx"],"names":["required","value","maxLengthCreator","maxLength","length","module","exports","FormControl","input","meta","touched","error","children","hasError","className","styles","formControl","Textarea","props","restProps","child","Input","createField","placeholder","name","validators","component","text","validate","React","Component","ProfileStatusHooks","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","onChange","e","currentTarget","autoFocus","onBlur","updateStatus","ProfileInfo","profile","s","descriptionBlock","src","photos","large","fullName","aboutMe","contacts","facebook","lookingForAJob","avaWorkStatus","lookingForAJobDescription","Preloader","maxLength10","reduxForm","form","onSubmit","handleSubmit","Field","Post","item","message","like","window","MyPosts","memo","console","log","postsElements","posts","reverse","map","p","likesCount","postsBlock","addPost","newPost","MyPostsContainer","connect","state","profilePage","newPostText","dispatch","addPostActionCreator","Profile","ProfileContainer","userId","this","match","params","authorizedUserId","history","push","getUserProfile","getStatus","compose","auth","isAuth","withRouter"],"mappings":"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","file":"static/js/4.1beda315.chunk.js","sourcesContent":["export const required = value => {  // если значени нет, кнопка не сработает\r\n    if(value) return undefined;\r\n\r\n    return \"Field is required\";\r\n}\r\n\r\nexport const maxLengthCreator = (maxLength) => (value) => {\r\n    if(value && value.length > maxLength ) return `Max length is ${maxLength} symbols`; //если знаение есть  его длинна больше 30 символов, верни \"Max length is 30 symbols\" (кнопка не сработает)\r\n\r\n    return undefined; //иначе undefined\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControls_formControl__2ZO4u\",\"error\":\"FormsControls_error__1OgfD\",\"formSummaryError\":\"FormsControls_formSummaryError__34K1F\"};","import React from \"react\";\r\nimport { Field } from \"redux-form\";\r\nimport { required } from \"../../../utils/validators/validators\";\r\nimport styles from './FormsControls.module.css'\r\n\r\nconst FormControl = ({ input, meta: {touched, error}, children }) => { // хотим достать из пропсов\r\n\r\n    const hasError = touched && error; //мета данные это данные о данных... Если в metа tuoched и error то показывай span, иначе не показывай\r\n\r\n    return (                //деструктуризируем (распаровываем)  input и props (в props уже нет input)  //2 строка: если в мета есть ошибка hasError тогда покажи styles.error иначе ничего\r\n        <div className={styles.formControl + ' ' + (hasError ? styles.error : \"\")}>\r\n            <div>\r\n                {children}\r\n            </div>\r\n            {hasError && <span>{error}</span>}\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport const Textarea = (props) => {\r\n    const { input, meta, child, ...restProps } = props; // хотим достать input, meta, child а всё остальное оставить в restProps (остаточные пропсы)\r\n    return ( //прокидываем из пропсов input и restProps в элемент\r\n        <FormControl {...props}>\r\n            <textarea {...input} {...restProps} />\r\n        </FormControl>)\r\n}\r\n\r\nexport const Input = (props) => {\r\n    const { input, meta, child, ...restProps } = props;\r\n    return <FormControl {...props}>\r\n        <input {...input} {...restProps} />\r\n    </FormControl>\r\n}\r\n\r\n\r\nexport const createField = (placeholder, name, validators, component, props = {}, text = \"\") => (\r\n    <div>\r\n        <Field placeholder={placeholder} name={name}\r\n               validate={validators}\r\n               component={component}\r\n               {...props}\r\n        /> {text}\r\n    </div>\r\n)","// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__rq_8X\",\"avaWorkStatus\":\"ProfileInfo_avaWorkStatus__8SwfP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__1pnl_\",\"posts\":\"MyPosts_posts__Bvj-r\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__1R_zZ\"};","import React from \"react\"   //react мы подключаем что бы то что мы пишем (jsx) babel транспелировал (переделал) в код понятный virtualDOM\r\n\r\nclass ProfileStatus extends React.Component {\r\n\r\nstate = {\r\n    editMode: false,\r\n    status: this.props.status\r\n}\r\nactivateEditMode = () => { //объявляем метод с помощью стрелочной функции\r\n    this.setState({  // setSate ассинхроннен, это значит что state поменяется не моментально, а во время перерисовки\r\n        editMode: true //установи editMode true и перерисуйся\r\n    })\r\n}\r\ndeactivateEditMode = () => { //объявляем метод с помощью стрелочной функции\r\n    this.setState({  // setSate ассинхроннен, это значит что state поменяется не моментально, а во время перерисовки\r\n        editMode: false, //установи editMode false и перерисуйся\r\n    })\r\n    this.props.updateStatus(this.state.status)\r\n}\r\n\r\nonStatusChange=(e)=>{\r\n    this.setState({\r\n        status: e.currentTarget.value\r\n    })\r\n}\r\n\r\ncomponentDidUpdate(prevProps, prevState){ //prev значит увидеть прошлый props и state(componentDidUpdate позволяет нам обновить текущее состояние state)\r\n    \r\n    if(prevProps.status != this.props.status){  // если предыдущий статус не равен текущиму \r\n        this.setState({\r\n            status: this.props.status // покажи статус\r\n        })\r\n    }\r\n}\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                {!this.state.editMode && //если editMode = false  покажи status, при нажатии на кнопку обратись к методу activateEditMode\r\n                    <div>\r\n                        <span onDoubleClick={this.activateEditMode}>{this.props.status || \"No status\" } </span> \r\n                    </div>\r\n                }\r\n                {this.state.editMode &&  //если true тогда покажи input\r\n                    <div>\r\n                        <input  \r\n                            onChange={this.onStatusChange}\r\n                            autoFocus={true} \r\n                            onBlur={this.deactivateEditMode} // onBlur срабатывает когда мы уводим курсор с input'а\r\n                            value={this.state.status} /> \r\n                    </div>\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n//class'ы нам нужны что бы создавать однотипные объекты, React видит что мы создали класс, то он создаёт объект из которого дёргает разметку, компоненты жизненного цикла\r\n// покольку получается  это объект, у него должно быть своё состояние в котором может хранится инфа  \r\n\r\nexport default ProfileStatus","import React, { useEffect, useState } from \"react\"\r\n\r\nconst ProfileStatusHooks = (props) => {\r\n\r\n    let [editMode, setEditMode] = useState(false) //присвоить 0 значением editMode, а первым ф-цию setEditMode которой мы можем менят значение editMode (начальное значение стейта true)   \r\n    let [status, setStatus] = useState(props.status) //из пропсов берём  статус и отдаём его в значения\r\n\r\n    useEffect(() => {                // \"- Закиньте в меня ф-цию которую я выполню когда произайдёт уже отрисовка\"\r\n        setStatus(props.status) //статус засинх теми данными что пришли из пропсов\r\n    }, [props.status] ) //если зависимость от props.status изменилась, то синхронизируйся\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true)  // меняем значение стейта на true \r\n    }\r\n\r\n    const deactivateEditMode = () => { //объявляем метод с помощью стрелочной функции\r\n        setEditMode(false)\r\n        props.updateStatus(status)   // обнови статус\r\n    }\r\n\r\n    const onStatusChange = (e) => {   //значения из input (статуса) попадают в локальный стейт после каждого нажатия клавиши\r\n        setStatus(e.currentTarget.value);\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            {!editMode && //если editMode = false  покажи status, при нажатии на кнопку обратись к методу activateEditMode и показать инпут\r\n                <div>\r\n                    <span onDoubleClick={activateEditMode} >{props.status || \"No status\"} </span>\r\n                </div>\r\n            }\r\n            {editMode &&  //если true тогда покажи input\r\n                <div>\r\n                    <input\r\n                        onChange={onStatusChange}\r\n                        autoFocus={true}\r\n                        onBlur={deactivateEditMode} // onBlur срабатывает когда мы уводим курсор с input'а\r\n                        value={status}\r\n                    />\r\n                </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default ProfileStatusHooks;","import React from 'react';\r\nimport Preloader from '../../common/Preloader/Preloader';\r\nimport s from './ProfileInfo.module.css';\r\nimport ProfileStatus from './ProfileStatus';\r\nimport ProfileStatusHooks from './ProfileStatusHooks';\r\n\r\n\r\nconst ProfileInfo = ({profile, status, updateStatus}) => {\r\n    if(!profile){         //если у нас нет профайла\r\n       return <Preloader/>      // тогда мы вернём загрузку\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className={s.descriptionBlock}>\r\n               <img src={profile.photos.large}/>\r\n               <ProfileStatusHooks \r\n                status={status} \r\n                updateStatus={updateStatus}/>\r\n\r\n\r\n               <div><h3>Имя: {profile.fullName}</h3></div>\r\n               <div><h3>Обо мне: {profile.aboutMe}</h3></div>\r\n               <div><h3>Статус: </h3>{profile.aboutMe}</div>\r\n               <div><h3>Контакты: </h3>{profile.contacts.facebook}</div>\r\n\r\n               <div><h3>Ищу работу: </h3>{profile.lookingForAJob == true \r\n               ? <img className={s.avaWorkStatus} src='https://c.tenor.com/oTeBa4EVepMAAAAC/business-cat-working.gif'></img> \r\n               : <img className={s.avaWorkStatus} src='https://previews.123rf.com/images/ratoca/ratoca1904/ratoca190400030/124066330-funny-cat-in-relax-moment.jpg'></img>\r\n               }</div>\r\n               \r\n               <div><h3>Какую работу мне бы хотелось: </h3>{profile.lookingForAJobDescription}</div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileInfo;","import React from \"react\";\r\nimport { Field, reduxForm } from \"redux-form\";\r\nimport { maxLengthCreator, required } from \"../../../../utils/validators/validators\";\r\nimport { Textarea } from \"../../../common/FormsControls/FormsControls\";\r\n\r\n\r\nlet maxLength10 = maxLengthCreator(10)\r\n\r\nconst AddPostForm = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n            <Field \r\n            component={Textarea} // Указываем не в кавычках, а в скобках (ссылка на компонент)\r\n            name='newPost' \r\n            placeholder=\"Пиши что на душе\"\r\n            validate={[required, maxLength10]} />\r\n            </div>\r\n            <div>\r\n                <button> Add post</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default reduxForm({form: 'messageAddPostForm'})(AddPostForm)","import React from 'react';\r\nimport s from './Post.module.css';\r\n\r\n\r\nconst Post = (props) => { \r\n    return (\r\n        <div>\r\n            <div className={s.item}>\r\n                <img src='https://hips.hearstapps.com/hmg-prod.s3.amazonaws.com/images/close-up-of-cat-wearing-sunglasses-while-sitting-royalty-free-image-1571755145.jpg'></img>\r\n                <span> Message: {props.message} </span>\r\n            \r\n               \r\n            </div>\r\n            <span>like: {props.like} </span>\r\n        </div>\r\n    )\r\n}\r\nexport default Post;\r\n","import React, { PureComponent } from 'react';\r\nimport AddPostForm from './AddPostForm/AddPostForm';\r\nimport s from './MyPosts.module.css';\r\nimport Post from './Post/Post';\r\n\r\nwindow.props = [];\r\n\r\nconst MyPosts = React.memo(props => {  //на входе принимает одну компоненту а на выходе другая memo, если компонента не изменилась, то она снова не отрисовывается\r\n  \r\n    //в PureComponent (промежуток между Component и нашей компонентой) уже вшита shouldComponentUpdate но что бы не использовать классовую компоненту мы используем React.memo\r\n    // shouldComponentUpdate(nextProps, nextState){ //компонента, нужно ли тебе обновится? (следующий пропс и стейт)\r\n    //     return nextProps != this.props || nextState != this.props;  //если след пропсы не ровны текущим то отрисуй, если нет, то не надо\r\n    // }\r\n\r\n      console.log(\"RENDER\")\r\n\r\n    let postsElements = [...props.posts]\r\n    .reverse()  //перевернуть копию массива (копию что бы не изменить store во внешнем мире)\r\n    .map(p =>\r\n       <Post message={p.message} like={p.likesCount} />); //в качестве \"p\" у нас придёт строка массива posts (p можно заменить на что угодно)\r\n    //и из строки массива как с props мы забераем один из элементов p.message или p.likesCount\r\n    // т.е. .map это цикл который повторяет элемент за элементом из указанного массива.\r\n\r\n    let newPostElement = React.createRef();\r\n\r\n    let addNewPost = value => {\r\n      props.addPost(value.newPost);\r\n    };\r\n\r\n    return (<div className={s.postsBlock}>\r\n            <h3> My posts </h3>\r\n\r\n            <AddPostForm onSubmit={addNewPost} />\r\n\r\n            <div className={s.posts}>\r\n                {postsElements}\r\n            </div>\r\n        </div>);\r\n  })\r\n\r\n\r\n\r\n\r\nexport default MyPosts;","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { addPostActionCreator, updateActionPostText } from '../../../redux/profile-reducer';\r\nimport MyPosts from './MyPosts';\r\n\r\nlet mapStateToProps = (state) => {  //при изменении state запускается эта ф-ци и новый объект сравнивается со старым, если изм. нет компан. не перерисовывается\r\n    return {\r\n        posts: state.profilePage.posts,\r\n        newPostText: state.profilePage.newPostText\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        addPost: (newPost) => {\r\n            dispatch(addPostActionCreator(newPost));\r\n        }\r\n    }\r\n}\r\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts) //MyPosts перересуйся когд в тебе измениться posts\r\n\r\n\r\nexport default MyPostsContainer;","import React from 'react';\r\nimport ProfileInfo from './ProfileInfo/ProfileInfo';\r\nimport MyPostsContainer from './MyPosts/MyPostsContainer';\r\nimport Preloader from '../common/Preloader/Preloader';\r\n\r\nconst Profile = (props) => {\r\n    return (\r\n        <div>\r\n            <ProfileInfo \r\n                profile={props.profile}\r\n                status={props.status} \r\n                updateStatus={props.updateStatus}\r\n                />\r\n            <MyPostsContainer />\r\n        </div>\r\n    )\r\n}\r\nexport default Profile;\r\n\r\n//<MyPosts posts={props.posts}/> это props MyPosts'ов (момент отрисовки MyPosts)","import React from 'react';\r\nimport Profile from './Profile';\r\nimport { getUserProfile, getStatus, updateStatus } from '../../redux/profile-reducer';\r\nimport { connect } from 'react-redux';\r\nimport {  withRouter } from 'react-router-dom';\r\nimport { compose } from 'redux';\r\n\r\n\r\nclass ProfileContainer extends React.Component {\r\n\r\n    componentDidMount() {                            // Происходит монтирование компоненты с сервера (запрос на сервак)\r\n        let userId = this.props.match.params.userId; //принимает из пропсов userId которые приходят из запросо на сервер\r\n        if (!userId) {  //если не получили ID \r\n            userId = this.props.authorizedUserId;  // то установить данный ID из Auth\r\n            if (!userId) {  // ксли нет и авторизации\r\n                this.props.history.push(\"/login\"); // тогда перенаправь на login\r\n            }\r\n        }\r\n        this.props.getUserProfile(userId);\r\n        this.props.getStatus(userId)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Profile {...this.props}\r\n                    profile={this.props.profile}\r\n                    status={this.props.status} \r\n                    updateStatus={this.props.updateStatus} />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nlet mapStateToProps = (state) => ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    authorizedUserId: state.auth.userId,\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\n\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, { getUserProfile, getStatus, updateStatus }), // connect создаёт вокруг компаненты WithUrlDataContainerComponent ещё одну, и заливает туда данные из mapStateToProps и setUserProfile (store)\r\n    withRouter, //withRouter creating component which wraps component and gives to this component URL\r\n    // whisAuthRedirect  //оборачивает компоненту Dialogs в whisAuthRedirect (HOC)\r\n)(ProfileContainer) //compose возми ProfileContainer и закинь их в whisAuthRedirect, потом в withRouter, а этот результат закинь в connect;\r\n"],"sourceRoot":""}