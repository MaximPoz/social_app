{"version":3,"sources":["utils/validators/validators.js","components/common/FormsControls/FormsControls.module.css","components/common/FormsControls/FormsControls.js","components/Login/Login.jsx"],"names":["required","value","maxLengthCreator","maxLength","length","module","exports","FormControl","input","meta","touched","error","children","hasError","className","styles","formControl","Textarea","props","restProps","child","Input","createField","placeholder","name","validators","component","text","validate","LoginReduxForm","reduxForm","form","handleSubmit","onSubmit","type","style","formSummaryError","connect","state","isAuth","auth","login","to","formData","email","password","rememberMe"],"mappings":"8HAAA,oEAAO,IAAMA,EAAW,SAAAC,GACpB,IAAGA,EAEH,MAAO,qBAGEC,EAAmB,SAACC,GAAD,OAAe,SAACF,GAC5C,GAAGA,GAASA,EAAMG,OAASD,EAAY,MAAM,iBAAN,OAAwBA,EAAxB,e,oBCN3CE,EAAOC,QAAU,CAAC,YAAc,mCAAmC,MAAQ,6BAA6B,iBAAmB,0C,kQCIrHC,EAAc,SAAC,GAAgD,EAA9CC,MAA+C,IAAD,IAAvCC,KAAOC,EAAgC,EAAhCA,QAASC,EAAuB,EAAvBA,MAAQC,EAAe,EAAfA,SAE5CC,EAAWH,GAAWC,EAE5B,OACI,cADoB,CACpB,OAAKG,UAAWC,IAAOC,YAAc,KAAOH,EAAWE,IAAOJ,MAAQ,IAAtE,UACI,8BACKC,IAEJC,GAAY,+BAAOF,QAMnBM,EAAW,SAACC,GACrB,IAAQV,EAAqCU,EAArCV,MAAuBW,GAAcD,EAA9BT,KAA8BS,EAAxBE,MAArB,YAA6CF,EAA7C,IACA,OACI,aADK,CACJX,EAAD,2BAAiBW,GAAjB,aACI,oDAAcV,GAAWW,QAIxBE,EAAQ,SAACH,GAClB,IAAQV,EAAqCU,EAArCV,MAAuBW,GAAcD,EAA9BT,KAA8BS,EAAxBE,MAArB,YAA6CF,EAA7C,IACA,OAAO,cAACX,EAAD,2BAAiBW,GAAjB,aACH,iDAAWV,GAAWW,QAKjBG,EAAc,SAACC,EAAaC,EAAMC,EAAYC,GAAhC,IAA2CR,EAA3C,uDAAmD,GAAIS,EAAvD,uDAA8D,GAA9D,OACvB,gCACI,cAAC,IAAD,aAAOJ,YAAaA,EAAaC,KAAMA,EAChCI,SAAUH,EACVC,UAAWA,GACPR,IAJf,IAKQS,O,iCC1CZ,2FA2BME,EAAiBC,YAAU,CAAEC,KAAM,SAAlBD,EAlBL,SAAC,GAA6B,IAA3BE,EAA0B,EAA1BA,aAAcrB,EAAY,EAAZA,MAC/B,OACI,uBACIsB,SAAUD,EADd,UAEKV,YAAY,QAAS,QAAS,CAACtB,KAAWqB,KAC1CC,YAAY,WAAY,WAAY,CAACtB,KAAWqB,IAAO,CAACa,KAAM,aAC9DZ,YAAY,KAAM,aAAc,GAAID,IAAO,CAACa,KAAM,YAAa,eAE/DvB,GAAS,sBAAKG,UAAWqB,IAAMC,iBAAtB,cAA0CzB,KAGpD,8BACI,mDA4BD0B,uBAFS,SAACC,GAAD,MAAY,CAAEC,OAAQD,EAAME,KAAKD,UAEjB,CAAEE,WAA3BJ,EAnBD,SAACnB,GAKX,OAAIA,EAAMqB,OACC,cAAC,IAAD,CAAUG,GAAI,aAGlB,gCACH,uCACA,cAACb,EAAD,CACII,SAXS,SAACU,GACdzB,EAAMuB,MAAME,EAASC,MAAOD,EAASE,SAAUF,EAASG","file":"static/js/6.ce059b43.chunk.js","sourcesContent":["export const required = value => {  // если значени нет, кнопка не сработает\r\n    if(value) return undefined;\r\n\r\n    return \"Field is required\";\r\n}\r\n\r\nexport const maxLengthCreator = (maxLength) => (value) => {\r\n    if(value && value.length > maxLength ) return `Max length is ${maxLength} symbols`; //если знаение есть  его длинна больше 30 символов, верни \"Max length is 30 symbols\" (кнопка не сработает)\r\n\r\n    return undefined; //иначе undefined\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControls_formControl__2ZO4u\",\"error\":\"FormsControls_error__1OgfD\",\"formSummaryError\":\"FormsControls_formSummaryError__34K1F\"};","import React from \"react\";\r\nimport { Field } from \"redux-form\";\r\nimport { required } from \"../../../utils/validators/validators\";\r\nimport styles from './FormsControls.module.css'\r\n\r\nconst FormControl = ({ input, meta: {touched, error}, children }) => { // хотим достать из пропсов\r\n\r\n    const hasError = touched && error; //мета данные это данные о данных... Если в metа tuoched и error то показывай span, иначе не показывай\r\n\r\n    return (                //деструктуризируем (распаровываем)  input и props (в props уже нет input)  //2 строка: если в мета есть ошибка hasError тогда покажи styles.error иначе ничего\r\n        <div className={styles.formControl + ' ' + (hasError ? styles.error : \"\")}>\r\n            <div>\r\n                {children}\r\n            </div>\r\n            {hasError && <span>{error}</span>}\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport const Textarea = (props) => {\r\n    const { input, meta, child, ...restProps } = props; // хотим достать input, meta, child а всё остальное оставить в restProps (остаточные пропсы)\r\n    return ( //прокидываем из пропсов input и restProps в элемент\r\n        <FormControl {...props}>\r\n            <textarea {...input} {...restProps} />\r\n        </FormControl>)\r\n}\r\n\r\nexport const Input = (props) => {\r\n    const { input, meta, child, ...restProps } = props;\r\n    return <FormControl {...props}>\r\n        <input {...input} {...restProps} />\r\n    </FormControl>\r\n}\r\n\r\n\r\nexport const createField = (placeholder, name, validators, component, props = {}, text = \"\") => (\r\n    <div>\r\n        <Field placeholder={placeholder} name={name}\r\n               validate={validators}\r\n               component={component}\r\n               {...props}\r\n        /> {text}\r\n    </div>\r\n)","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { reduxForm } from \"redux-form\";\r\nimport { login } from '../../redux/auth-reducer';\r\nimport { required } from '../../utils/validators/validators';\r\nimport {  createField, Input } from '../common/FormsControls/FormsControls';\r\nimport style from \"./../common/FormsControls/FormsControls.module.css\"\r\n\r\nconst LoginForm = ({ handleSubmit, error }) => { //нам из пропсов интересен handleSubmit и error\r\n    return (\r\n        <form  //в пропсах к нам из контейнерной компоненты reduxForm приходит handleSubmit (там идёт сбор всех данных)\r\n            onSubmit={handleSubmit}>\r\n            {createField(\"Email\", \"email\", [required], Input)}\r\n            {createField(\"Password\", \"password\", [required], Input, {type: \"password\"})}\r\n            {createField(null, \"rememberMe\", [], Input, {type: \"checkbox\"}, \"remember me\")}\r\n\r\n            {error && <div className={style.formSummaryError}> {error}\r\n            </div>\r\n            }\r\n            <div>\r\n                <button>Login</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst LoginReduxForm = reduxForm({ form: 'login' }) //уникальное имя формы\r\n    (LoginForm) // обернули хоком reduxForm наш LoginForm\r\n\r\nconst Login = (props) => {\r\n    const onSubmit = (formData) => { // в formData приходят все значения из формы\r\n        props.login(formData.email, formData.password, formData.rememberMe);  //вызываем login из пропсов и даём ему значения из formData\r\n    }\r\n\r\n    if (props.isAuth) { // если мы зарегестрировались, тогда перенаравляемся в профайл\r\n        return <Redirect to={'/profile'} />\r\n    }\r\n\r\n    return <div>\r\n        <h1>LOGIN</h1>\r\n        <LoginReduxForm  //из Login в LoginReduxForm мы передаём колбэк ф-цию onSubmit в которую у нас приходят все значения из формы (formData) \r\n            onSubmit={onSubmit} />\r\n    </div>\r\n}\r\n\r\n\r\nconst mapStateToProps = (state) => ({ isAuth: state.auth.isAuth })\r\n\r\nexport default connect(mapStateToProps, { login }) //login в этой точке является санКриейтором\r\n    (Login); "],"sourceRoot":""}