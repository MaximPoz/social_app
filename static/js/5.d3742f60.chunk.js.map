{"version":3,"sources":["utils/validators/validators.js","components/common/FormsControls/FormsControls.module.css","components/common/FormsControls/FormsControls.js","components/Dialogs/Dialogs.module.css","HOC/whisAuthRedirect.js","components/Dialogs/AddMessageForm/AddMessageForm.jsx","components/Dialogs/DialogItem/DialogItem.jsx","components/Dialogs/Message/Message.jsx","components/Dialogs/Dialogs.jsx","components/Dialogs/DialogsContainer.jsx"],"names":["required","value","maxLengthCreator","maxLength","length","module","exports","FormControl","input","meta","touched","error","children","hasError","className","styles","formControl","Textarea","props","restProps","child","Input","createField","placeholder","name","validators","component","text","validate","mapStateToPropsRedirect","state","isAuth","auth","whisAuthRedirect","Component","RedirectComponent","this","to","React","connect","maxLength10","reduxForm","form","onSubmit","handleSubmit","s","area","Field","DialogItem","path","id","avaDialogs","src","activeClassName","active","Message","dialog","message","Dialogs","dialogsPage","dialogsElements","dialogs","map","d","messagesElements","messages","m","dialogsItems","values","sendMessage","newMessageBody","mapStateToProps","mapDispatchToProps","dispatch","sendMessageActionCreator","AuthRedirectComponent","compose"],"mappings":"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","file":"static/js/5.d3742f60.chunk.js","sourcesContent":["export const required = value => {  // если значени нет, кнопка не сработает\r\n    if(value) return undefined;\r\n\r\n    return \"Field is required\";\r\n}\r\n\r\nexport const maxLengthCreator = (maxLength) => (value) => {\r\n    if(value && value.length > maxLength ) return `Max length is ${maxLength} symbols`; //если знаение есть  его длинна больше 30 символов, верни \"Max length is 30 symbols\" (кнопка не сработает)\r\n\r\n    return undefined; //иначе undefined\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControls_formControl__2ZO4u\",\"error\":\"FormsControls_error__1OgfD\",\"formSummaryError\":\"FormsControls_formSummaryError__34K1F\"};","import React from \"react\";\r\nimport { Field } from \"redux-form\";\r\nimport { required } from \"../../../utils/validators/validators\";\r\nimport styles from './FormsControls.module.css'\r\n\r\nconst FormControl = ({ input, meta: {touched, error}, children }) => { // хотим достать из пропсов\r\n\r\n    const hasError = touched && error; //мета данные это данные о данных... Если в metа tuoched и error то показывай span, иначе не показывай\r\n\r\n    return (                //деструктуризируем (распаровываем)  input и props (в props уже нет input)  //2 строка: если в мета есть ошибка hasError тогда покажи styles.error иначе ничего\r\n        <div className={styles.formControl + ' ' + (hasError ? styles.error : \"\")}>\r\n            <div>\r\n                {children}\r\n            </div>\r\n            {hasError && <span>{error}</span>}\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport const Textarea = (props) => {\r\n    const { input, meta, child, ...restProps } = props; // хотим достать input, meta, child а всё остальное оставить в restProps (остаточные пропсы)\r\n    return ( //прокидываем из пропсов input и restProps в элемент\r\n        <FormControl {...props}>\r\n            <textarea {...input} {...restProps} />\r\n        </FormControl>)\r\n}\r\n\r\nexport const Input = (props) => {\r\n    const { input, meta, child, ...restProps } = props;\r\n    return <FormControl {...props}>\r\n        <input {...input} {...restProps} />\r\n    </FormControl>\r\n}\r\n\r\n\r\nexport const createField = (placeholder, name, validators, component, props = {}, text = \"\") => (\r\n    <div>\r\n        <Field placeholder={placeholder} name={name}\r\n               validate={validators}\r\n               component={component}\r\n               {...props}\r\n        /> {text}\r\n    </div>\r\n)","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__1yYEM\",\"dialogsItems\":\"Dialogs_dialogsItems__331jn\",\"active\":\"Dialogs_active__2NYdo\",\"messages\":\"Dialogs_messages__3qtY2\",\"message\":\"Dialogs_message__9eNed\",\"avaDialogs\":\"Dialogs_avaDialogs__3GjbW\"};","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Redirect } from \"react-router-dom\";\r\n\r\nlet mapStateToPropsRedirect = (state) =>{\r\n    return{isAuth: state.auth.isAuth}}      //состояние флага isAuth находится в Heder\r\n\r\nexport const whisAuthRedirect = (Component) => {\r\n    class RedirectComponent extends React.Component{\r\n        render(){\r\n            if(!this.props.isAuth) return <Redirect to='/login'/> //если не isAuth то перенаправить (redirect) на url login\r\n\r\n            return <Component {...this.props}/> //перерисовка целивой компоненты которая прийдёт на входе в whisAuthRedirect\r\n        }\r\n    }\r\n\r\n    let ConnectedAuthRedirectComponent = connect (mapStateToPropsRedirect)(RedirectComponent) //обернули  RedirectComponent ConnectedAuthRedirectComponent'ом тем самым дав доступ к mapStateToPropsRedirect\r\n    return ConnectedAuthRedirectComponent;\r\n}","import React from \"react\";\r\nimport { Field, reduxForm } from \"redux-form\";\r\nimport { maxLengthCreator, required } from \"../../../utils/validators/validators\";\r\nimport { Textarea } from \"../../common/FormsControls/FormsControls\";\r\nimport s from '../Dialogs.module.css';\r\n\r\n\r\n\r\nlet maxLength10 = maxLengthCreator(300)\r\n\r\nconst AddMessageForm = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div className={s.area}>\r\n                <Field\r\n                    component={Textarea}\r\n                    name='newMessageBody'\r\n                    placeholder='Введите сообщение'\r\n                    validate={[required, maxLength10]} />\r\n\r\n                <div><button>Add Message</button></div>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default reduxForm({ form: \"dialogAddMessageForm\" })(AddMessageForm); // название формы и компонента которую мы оборачиваем","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport s from './../Dialogs.module.css';\r\n\r\n\r\n\r\nconst DialogItem = (props) => {\r\n    let path = \"/dialogs/\" + props.id\r\n    return (\r\n        <div >\r\n            <img className={s.avaDialogs}\r\n                src='https://avatarko.ru/img/kartinka/2/zhivotnye_kot_prikol_ochki_1637.jpg'></img>\r\n            <NavLink to={path} activeClassName={s.active}> {props.name} </NavLink>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default DialogItem;","import React from 'react';\r\nimport s from './../Dialogs.module.css';\r\n\r\n\r\nconst Message = (props) => {\r\n    return (\r\n        <div className={s.dialog}> {props.message}</div>\r\n    )\r\n}\r\n\r\n\r\nexport default Message;","import React from 'react';\r\nimport { Redirect } from 'react-router-dom';\r\nimport AddMessageForm from './AddMessageForm/AddMessageForm';\r\nimport DialogItem from './DialogItem/DialogItem';\r\nimport s from './Dialogs.module.css';\r\nimport Message from './Message/Message';\r\n\r\n\r\nconst Dialogs = (props) => {\r\n\r\n    let state = props.dialogsPage; //ссылка на dialogsPage\r\n\r\n    let dialogsElements = state.dialogs.map(d =>\r\n        <DialogItem name={d.name} key={d.id} id={d.id} />) //везде где у нас map'ится массив нужно добовлять эл. key, в качестве key нужно указывать id эл. из которого мы получаем JSX элемент. Потому что важно чтобы эти эл. были уникальны. В данном случае d\r\n    let messagesElements = state.messages.map(m =>\r\n        <Message message={m.message} key={m.id} />) //тут индекс m. Это делается что бы в консоли браузера не вылетала ошибка\r\n\r\n\r\n    let addNewMessage = (values) => {\r\n        props.sendMessage(values.newMessageBody);  //добовляем сообщение из AddMessageFormRedux onSubmit в контейнерную компоненту\r\n    }\r\n    if (!props.isAuth)\r\n        return <Redirect to={\"/login\"} />;\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogsItems}>\r\n                {dialogsElements}</div>\r\n\r\n            <div className={s.messages}>\r\n                <div>{messagesElements}</div>\r\n            </div>\r\n            <AddMessageForm onSubmit={addNewMessage} />\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default Dialogs;","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { compose } from 'redux';\r\nimport { whisAuthRedirect } from '../../HOC/whisAuthRedirect';\r\nimport { sendMessageActionCreator } from '../../redux/dialogs-reducer';\r\nimport Dialogs from './Dialogs';\r\n\r\n\r\nlet mapStateToProps = (state) =>{\r\n    return{\r\n        dialogsPage: state.dialogsPage,\r\n        newMessageBody: state.dialogsPage.newMessageBody\r\n    }\r\n}\r\n\r\n\r\n\r\nlet mapDispatchToProps = (dispatch) => {\r\n\r\n    return{\r\n        sendMessage: (newMessageBody) => {\r\n            dispatch(sendMessageActionCreator(newMessageBody)); //пробрасываем сообщение (newMessageBody) в action dialogs-reducer \r\n        },\r\n    }\r\n}\r\n\r\nlet AuthRedirectComponent = whisAuthRedirect(Dialogs); \r\n\r\nconst DialogsContainer = connect (mapStateToProps, mapDispatchToProps) (AuthRedirectComponent);\r\n\r\nexport default compose( \r\n    connect (mapStateToProps, mapDispatchToProps), //берёт диалоги и отдаёт им нужную инфу из state и reducer \r\n    whisAuthRedirect, //оборачивает компоненту Dialogs в whisAuthRedirect (HOC)\r\n )(Dialogs)  //compose возми диалоги и закинь их в whisAuthRedirect, а этот результат закинь в connect;"],"sourceRoot":""}